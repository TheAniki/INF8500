///////////////////////////////////////////////////////////////////////////////
//
//	Bubble.cpp
//
///////////////////////////////////////////////////////////////////////////////
#include "Bubble.h"


///////////////////////////////////////////////////////////////////////////////
//
//	Constructeur
//
///////////////////////////////////////////////////////////////////////////////
Bubble::Bubble( sc_module_name zName )
: sc_module(zName)
{	
	/*
	
	À compléter
	
	*/
}


///////////////////////////////////////////////////////////////////////////////
//
//	Destructeur
//
///////////////////////////////////////////////////////////////////////////////
Bubble::~Bubble()
{
	/*
	
	À compléter
	
	*/
}


///////////////////////////////////////////////////////////////////////////////
//
//	thread
//
///////////////////////////////////////////////////////////////////////////////
void Bubble::thread(void)
{
	// Variable
	unsigned int nbrElem;
	
	// 1ere lecture: nombre d'éléments à trier
	nbrElem = readPort->Read(0);
	unsigned int* elements = new unsigned int[nbrElem];

	// Lecture des éléments à trier
	for (int i = 1; i <= nbrElem; i++)
	{
		elements[i - 1] = readPort->Read(i * 4);
	}

	//Appel à bubble sort
	bubbleSort(elements, nbrElem);
		
	// Arrêt de la simulation
	sc_stop();

}


///////////////////////////////////////////////////////////////////////////////
//
//	bubbleSort
//
///////////////////////////////////////////////////////////////////////////////
void Bubble::bubbleSort(unsigned int *ptr, int counter)
{
	// Affichage avant tri
	for (int i = 0; i < counter-1; i++)
	{
		cout << "valeur : " << i << " | " << ptr[i] << endl;
	}

	// Tri
	/*
	
	À compléter
	
	*/
	
	// Affichage après tri
	/*
	
	À compléter
	
	*/
}
